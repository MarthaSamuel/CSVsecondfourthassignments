#BlueJ class context
comment0.target=quiz2
comment1.params=parser
comment1.target=org.apache.commons.csv.CSVRecord\ coldestHourInFile(org.apache.commons.csv.CSVParser)
comment1.text=\r\n\ Write\ a\ method\ named\ coldestHourInFile\ that\ has\ one\ parameter,\ a\ CSVParser\ named\ parser.\ \r\n\ This\ method\ returns\ the\ CSVRecord\ with\ the\ coldest\ temperature\ in\ the\ file,\ \r\n\ and\ thus\ all\ the\ information\ about\ the\ coldest\ temperature,\ \r\n\ such\ as\ the\ hour\ of\ the\ coldest\ temperature.\ \r\n\ You\ should\ also\ write\ a\ void\ method\ named\ testColdestHourInFile()\ to\ test\ this\ method\ \r\n\ and\ print\ out\ information\ about\ that\ coldest\ temperature,\ such\ as\ the\ time\ of\ its\ occurrence.\r\n
comment10.params=
comment10.target=void\ testTemperatureInFile()
comment11.params=parser\ value
comment11.target=double\ averageTemperatureWithHighHumidityInFile(org.apache.commons.csv.CSVParser,\ int)
comment11.text=\r\n\ Write\ the\ method\ averageTemperatureWithHighHumidityInFile\ that\ has\ two\ parameters,\ a\ CSVParser\ named\ parser\ and\ an\ integer\ named\ value.\ \r\n\ This\ method\ returns\ a\ double\ that\ represents\ the\ average\ temperature\ of\ only\ those\ temperatures\ when\ the\ humidity\ was\ greater\ than\ or\ equal\ to\ value.\ \r\n\ You\ should\ also\ write\ a\ void\ method\ named\ testAverageTemperatureWithHighHumidityInFile()\ to\ test\ this\ method.\r\n
comment12.params=
comment12.target=void\ testAverageTemperatureWithHighHumidityInFile()
comment2.params=
comment2.target=void\ testColdestTemperatureInFile()
comment3.params=
comment3.target=java.lang.String\ fileWithColdestTemperature()
comment3.text=\r\n\ Write\ the\ method\ fileWithColdestTemperature\ that\ has\ no\ parameters.\ \r\n\ This\ method\ should\ return\ a\ string\ that\ is\ the\ name\ of\ the\ file\ from\ selected\ files\ that\ has\ the\ coldest\ temperature.\ \r\n\ You\ should\ also\ write\ a\ void\ method\ named\ testFileWithColdestTemperature()\ to\ test\ this\ method.\ \r\n\ Note\ that\ after\ determining\ the\ filename,\ you\ could\ call\ the\ method\ coldestHourInFile\ to\ determine\ the\ coldest\ temperature\ on\ that\ day.\ \r\n
comment4.params=
comment4.target=void\ testFileWithColdestTemperature()
comment5.params=parser
comment5.target=org.apache.commons.csv.CSVRecord\ lowestHumidityInFile(org.apache.commons.csv.CSVParser)
comment5.text=\r\n\ Write\ a\ method\ named\ lowestHumidityInFile\ that\ has\ one\ parameter,\ a\ CSVParser\ named\ parser.\ \r\n\ This\ method\ returns\ the\ CSVRecord\ that\ has\ the\ lowest\ humidity.\ \r\n\ If\ there\ is\ a\ tie,\ then\ return\ the\ first\ such\ record\ that\ was\ found.\r\n
comment6.params=
comment6.target=void\ testLowestHumidityInFile()
comment7.params=
comment7.target=java.lang.String\ lowestHumidityInManyFiles()
comment7.text=\r\n\ Write\ the\ method\ lowestHumidityInManyFiles\ that\ has\ no\ parameters.\ \r\n\ This\ method\ returns\ a\ CSVRecord\ that\ has\ the\ lowest\ humidity\ over\ all\ the\ files.\ \r\n\ If\ there\ is\ a\ tie,\ then\ return\ the\ first\ such\ record\ that\ was\ found.\ \r\n\ You\ should\ also\ write\ a\ void\ method\ named\ testLowestHumidityInManyFiles()\ \r\n\ to\ test\ this\ method\ and\ to\ print\ the\ lowest\ humidity\ AND\ the\ time\ the\ lowest\ humidity\ occurred.\r\n
comment8.params=
comment8.target=void\ testLowestHumidityInManyFile()
comment9.params=parser
comment9.target=double\ TemperatureInFile(org.apache.commons.csv.CSVParser)
comment9.text=\r\n\ Write\ the\ method\ averageTemperatureInFile\ that\ has\ one\ parameter,\ a\ CSVParser\ named\ parser.\ \r\n\ This\ method\ returns\ a\ double\ that\ represents\ the\ average\ temperature\ in\ the\ file.\ \r\n\ You\ should\ also\ write\ a\ void\ method\ named\ testAverageTemperatureInFile()\ to\ test\ this\ method.\r\n
numComments=13
